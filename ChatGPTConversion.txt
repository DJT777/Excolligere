Dylan Tussey
How can I open a .onnx file and look at its inputs and outputs

To open a .onnx file and inspect its inputs and outputs, you can use a tool like the ONNX Runtime or the Netron app.

    ONNX Runtime:
        Install the ONNX Runtime on your machine by following the instructions on the official website: https://microsoft.github.io/onnxruntime/.
        Once installed, you can use the onnxruntime-tools package to inspect the inputs and outputs of a .onnx file. For example, to see the inputs and outputs of a model called model.onnx, you can run the following command in a terminal: onnxruntime_cli info model.onnx.

    Netron:
        Netron is a free app that allows you to visualize and inspect neural network models, including .onnx files. You can download Netron from the official website: https://netron.app/.
        Once you've installed Netron, open it and drag and drop your .onnx file into the app. This will load the model, and you'll be able to see its inputs and outputs in the sidebar on the left-hand side of the app. You can click on an input or output to see its details, including its name, shape, and data type.

Both of these tools will allow you to inspect the inputs and outputs of your .onnx file. Choose the tool that best suits your needs and preferences.
Dylan Tussey
Show me how I could load an onnx file in python, input some data, and get the outputs

Sure, here's an example of how to load an ONNX model, input some data, and get the outputs using Python and the ONNX Runtime:

python

import onnxruntime as ort
import numpy as np

# Load the ONNX model
sess = ort.InferenceSession('path/to/your/model.onnx')

# Get the input and output names of the model
input_name = sess.get_inputs()[0].name
output_name = sess.get_outputs()[0].name

# Prepare input data
input_data = np.array([[1, 2, 3, 4]], dtype=np.float32)

# Run the model on the input data
output_data = sess.run([output_name], {input_name: input_data})

# Print the output data
print(output_data)

In this example, we first load the ONNX model using InferenceSession() from the ONNX Runtime. We then get the names of the input and output nodes of the model using get_inputs() and get_outputs(), respectively.

Next, we prepare some input data as a numpy array, which has the same shape and data type as the model's input.

Finally, we run the model using sess.run(), passing in the input data as a dictionary with the input name as the key. The output is a list of numpy arrays, which we can access by specifying the output name in square brackets. In this example, we're only interested in the first (and only) output of the model.

The resulting output data is also a numpy array, which contains the predictions or results of the model for the input data that we provided.
Dylan Tussey
how many values is this: 0,0,0,0,0,0,.01,.01,.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0

The series of numbers you provided consists of 23 values separated by commas.

The first 6 values are all zeros, and the next three values are 0.01. The following 15 values are all zeros, resulting in a total of 23 values.
Dylan Tussey
Show me how to create 1 numpy from several arrays of 6 zeros, another numpy array of 3 .01s and 4 0s and 4 0s and 40s

Sure! Here's how you can create a single NumPy array from several smaller arrays:

python

import numpy as np

# Create the individual arrays
zeros1 = np.zeros(6)
zeros2 = np.zeros(4)
zeros3 = np.zeros(4)
ones = np.full(3, 0.01)
forties = np.full(4, 40)

# Concatenate the arrays into a single array
result = np.concatenate((zeros1, ones, zeros2, zeros3, forties))

# Print the result
print(result)

In this example, we first create several smaller NumPy arrays using functions like np.zeros() and np.full(). We pass in the shape and values we want for each array.

Next, we concatenate the arrays into a single array using np.concatenate(). We pass in the individual arrays as arguments, in the order we want them to appear in the final array.

Finally, we print the resulting array using the print() function. The output should be a 21-element array with 6 zeros, 3 0.01s, 4 zeros, 4 zeros, and 4 40s.
Dylan Tussey
show me how to view an onnx file's inputs in python

Sure! Here's how you can view the inputs of an ONNX model in Python using the ONNX Runtime:

python

import onnxruntime as ort

# Load the ONNX model
sess = ort.InferenceSession('path/to/your/model.onnx')

# Get the input names and shapes
input_info = sess.get_inputs()
for i in input_info:
    print("Input name:", i.name)
    print("Input shape:", i.shape)

In this example, we first load the ONNX model using InferenceSession() from the ONNX Runtime. We pass in the path to the ONNX model file as an argument.

Next, we use get_inputs() to get information about the inputs to the model. This returns a list of dictionaries, where each dictionary contains information about a single input. We loop over this list and print the name and shape of each input using the name and shape attributes of the dictionary.

The resulting output will show the name and shape of each input in the ONNX model.
Dylan Tussey
Input name: obs
Input shape: [1, 29]

show me how to format this input data for input to this model in onnx: # Create the individual arrays
jointPos = np.zeros(6)
jointVel = np.zeros(4)
goalPos = np.zeros(4)
goalRot = np.full(3, 0.01)
prevAct = np.full(4, 0)

# Concatenate the arrays into a single array
input_data = np.concatenate((jointPos, jointVel, goalPos, goalRot, prevAct), dtype=np.float32)

Sure, here's an example of how to format the input data for the ONNX model based on the input information you provided:

python

import numpy as np
import onnxruntime as ort

# Load the ONNX model
sess = ort.InferenceSession('path/to/your/model.onnx')

# Create the individual arrays
jointPos = np.zeros(6)
jointVel = np.zeros(4)
goalPos = np.zeros(4)
goalRot = np.full(3, 0.01)
prevAct = np.full(4, 0)

# Concatenate the arrays into a single array
input_data = np.concatenate((jointPos, jointVel, goalPos, goalRot, prevAct), dtype=np.float32)

# Get the input name
input_name = sess.get_inputs()[0].name

# Create a dictionary to hold the input data
input_dict = {input_name: input_data.reshape(1, -1)}

# Run the model on the input data
output = sess.run(None, input_dict)

# Print the output
print(output)

In this example, we first load the ONNX model using InferenceSession() from the ONNX Runtime.

Next, we create several smaller NumPy arrays, similar to what you provided in your previous message. We then concatenate these arrays into a single NumPy array called input_data.

We get the name of the input to the model using get_inputs(), and store it in the variable input_name.

We then create a dictionary called input_dict, which has the input name as the key and the input data as the value. Note that we reshape the input data to have a batch size of 1 and an unknown number of columns using the reshape() method, as required by the ONNX Runtime.

Finally, we run the model on the input data using sess.run(). Since we're only interested in the output values of the model, we pass in None as the first argument to sess.run(). The resulting output is stored in the output variable and printed to the console.
Dylan Tussey
in an a2c network what are these outputs:

Output name: mu
Output shape: [1, 6]
Output name: log_std
Output shape: [1, 6]
Output name: value
Output shape: [1, 1]

In an A2C network, these outputs typically represent the policy and value estimates for a given state:

    mu: this output represents the policy of the A2C network, which is a probability distribution over the possible actions that the agent can take in the current state. The shape of the mu output is typically [1, n_actions], where n_actions is the number of possible actions.

    log_std: this output represents the logarithm of the standard deviation of the policy distribution. It is typically used to sample actions from the policy distribution during training. The shape of the log_std output is also [1, n_actions].

    value: this output represents the value estimate for the current state. The value estimate is the expected sum of future rewards that the agent can obtain starting from the current state. The shape of the value output is typically [1, 1], since it is a scalar value.

In summary, the mu and log_std outputs are used to sample actions from the policy distribution, while the value output is used to estimate the expected sum of future rewards for the current state.
Dylan Tussey
So if my a2c network is used to predict the movements of arm servos, then what outputs would I use to predict the arm movement?

If your A2C network is used to predict the movements of arm servos, then the outputs that you would use to predict the arm movement depend on the specific design of your A2C network.

In general, you would use the mu output to predict the next action or movement that the arm should take. The mu output represents the policy of the A2C network, which is a probability distribution over the possible actions that the agent can take in the current state. In the case of arm servos, the actions would correspond to the desired positions or movements of the servos.

Depending on the design of your A2C network, the log_std output may also be used in the prediction process. The log_std output represents the logarithm of the standard deviation of the policy distribution, and is typically used to sample actions from the policy distribution during training. However, it is possible that the log_std output may also be used during inference to adjust the variance of the predicted actions.

The value output is typically not used directly to predict the arm movement, since it represents the value estimate for the current state and not the next action. However, the value output can be used as a measure of how well the A2C network is performing, since it represents the expected sum of future rewards that the agent can obtain starting from the current state. In other words, a higher value output indicates that the A2C network is in a state where it is likely to receive higher rewards in the future, which can be useful for monitoring the performance of the network.
Dylan Tussey
Show me how to convert this first np array to degrees from radians:

​

import numpy as np

​

# Create the individual arrays

jointPos = np.zeros(6)

jointVel = np.zeros(6)

goalPos = np.full(3, 0.01)

goalRot = np.zeros(4)

goalRotRel = np.zeros(4)

prevAct = np.full(6, 0)

​

# Concatenate the arrays into a single array

input_data = np.concatenate((jointPos, jointVel, goalPos, goalRot, goalRotRel, prevAct), dtype=np.float32)

input_dict = {input_name: input_data.reshape(1, -1)}

​

# Run the model on the input data

output = sess.run(None, input_dict)

​

# Print the output

print(output)

[array([[-0.67597747, -1.3334423 , -1.5111129 , -1.168742  ,  0.5934814 ,
        -1.1605549 ]], dtype=float32), array([[-3.3093073, -2.2923913, -2.3842976, -3.2218351, -3.7424502,
        -1.612911 ]], dtype=float32), array([[0.34969229]], dtype=float32)]

Sure! Here's how you can convert the jointPos array to degrees from radians:

python

import numpy as np

# Define a conversion factor from radians to degrees
RAD_TO_DEG = 180 / np.pi

# Create the individual arrays
jointPos = np.zeros(6)
jointVel = np.zeros(6)
goalPos = np.full(3, 0.01)
goalRot = np.zeros(4)
goalRotRel = np.zeros(4)
prevAct = np.full(6, 0)

# Concatenate the arrays into a single array
input_data = np.concatenate((jointPos, jointVel, goalPos, goalRot, goalRotRel, prevAct), dtype=np.float32)

# Convert the jointPos array from radians to degrees
jointPos_deg = jointPos * RAD_TO_DEG

input_dict = {'input': input_data.reshape(1, -1)}

# Run the model on the input data
output = sess.run(None, input_dict)

# Print the output
print(output)

In this code, we first define a constant RAD_TO_DEG that represents the conversion factor from radians to degrees. We then compute jointPos_deg by multiplying jointPos by this conversion factor. Finally, we update the input_dict to use input_data and pass it to the model using sess.run().
Dylan Tussey
In this output from output, I want the first array to be converted to degree from radians

Sure, here's how you can convert the first
Dylan Tussey
Convert the first numpy array to degrees from radians:

[array([[-0.67597747, -1.3334423 , -1.5111129 , -1.168742  ,  0.5934814 ,
        -1.1605549 ]], dtype=float32), array([[-3.3093073, -2.2923913, -2.3842976, -3.2218351, -3.7424502,
        -1.612911 ]], dtype=float32), array([[0.34969229]], dtype=float32)]

Sure! Here's how you can convert the first array from radians to degrees:

python

import numpy as np

# Define a conversion factor from radians to degrees
RAD_TO_DEG = 180 / np.pi

# Run the model on the input data
output = sess.run(None, input_dict)

# Convert the first array from radians to degrees
output[0] = output[0] * RAD_TO_DEG

# Print the output
print(output)

In this code, we first define a constant RAD_TO_DEG that represents the conversion factor from radians to degrees. We then run the model and store the output in the variable output. Finally, we convert the first array in output from radians to degrees by multiplying it by RAD_TO_DEG. We update the value of output[0] with the converted array and print the entire output variable.
Dylan Tussey
I have a numpy array representing radians here:
[-1.3059846, -2.9862392, -1.9025381, -1.3023462, -1.1185279,
        -1.763873 ]

How can I convert this to a positive value integer representing angle?

To convert radians to degrees, you can use the formula degrees = radians * (180 / pi). Once you have degrees, you can convert to a positive integer angle by adding 360 to the degrees and taking the result modulo 360. Here's an example code snippet:

python

import numpy as np

# Define the array in radians
radians_array = np.array([-1.3059846, -2.9862392, -1.9025381, -1.3023462, -1.1185279, -1.763873])

# Convert to degrees
degrees_array = radians_array * (180 / np.pi)

# Convert to positive integer angle
positive_int_array = (degrees_array + 360) % 360

print(positive_int_array)

This will output an array of positive integer angles in degrees. The degrees_array contains the angles in degrees, and the positive_int_array contains the angles as positive integers between 0 and 359.
Dylan Tussey
Tell me how this code is converting the predicted values to the position value for the joint position:

import socket
import struct
import time

import numpy as np


class RealWorldDofbot():
    # Defined in dofbot.usd
    sim_dof_angle_limits = [
        (-90, 90, False),
        (-90, 90, False),
        (-90, 90, False),
        (-90, 90, False),
        (-90, 180, False),
        (-30, 60, True),
        # (-30, 60): /arm_01/link5/Finger_Left_01/Finger_Left_01_RevoluteJoint
        # (-60, 30): /arm_01/link5/Finger_Right_01/Finger_Right_01_RevoluteJoint
    ] # _sim_dof_limits[:,2] == True indicates inversed joint angle compared to real

    # Ref: Section `6.5 Control all servo` in  http://www.yahboom.net/study/Dofbot-Jetson_nano
    servo_angle_limits = [
        (0, 180),
        (0, 180),
        (0, 180),
        (0, 180),
        (0, 270),
        (0, 180),
    ]
    def __init__(self, IP, PORT, fail_quietely=False, verbose=False) -> None:
        print("Connecting to real-world Dofbot at IP:", IP, "and port:", PORT)
        self.fail_quietely = fail_quietely
        self.failed = False
        self.last_sync_time = 0
        self.sync_hz = 10000
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = (IP, PORT)
            self.sock.connect(server_address)
            print("Connected to real-world Dofbot!")
        except socket.error as e:
            self.failed = True
            print("Connection to real-world Dofbot failed!")
            if self.fail_quietely:
                print(e)
            else:
                raise e

    def send_joint_pos(self, joint_pos):
        if time.time() - self.last_sync_time < 1 / self.sync_hz:
            return
        self.last_sync_time = time.time()
        if len(joint_pos) != 6:
            raise Exception("The length of Dofbot joint_pos is {}, but should be 6!".format(len(joint_pos)))
        # Convert Sim angles to Real angles
        servo_angles = [90] * 6
        for i, pos in enumerate(joint_pos):
            if i == 5:
                # Ignore the gripper joints for Reacher task
                continue
            # Map [L, U] to [A, B]
            L, U, inversed = self.sim_dof_angle_limits[i]
            A, B = self.servo_angle_limits[i]
            angle = np.rad2deg(float(pos))
            if not L <= angle <= U:
                print("The {}-th simulation joint angle ({}) is out of range! Should be in [{}, {}]".format(i, angle, L, U))
                angle = np.clip(angle, L, U)
            servo_angles[i] = (angle - L) * ((B-A)/(U-L)) + A # Map [L, U] to [A, B]
            if inversed:
                servo_angles[i] = (B-A) - (servo_angles[i] - A) + A # Map [A, B] to [B, A]
            if not A <= servo_angles[i] <= B:
                raise Exception("(Should Not Happen) The {}-th real world joint angle ({}) is out of range! hould be in [{}, {}]".format(i, servo_angles[i], A, B))
        print("Sending real-world Dofbot joint angles:", servo_angles)
        if self.failed:
            print("Cannot send joint states. Not connected to real-world Dofbot!")
            return
        packer = struct.Struct("f f f f f f")
        packed_data = packer.pack(*servo_angles)
        try:
            self.sock.sendall(packed_data)
        except socket.error as e:
            self.failed = True
            print("Send to real-world Dofbot failed!")
            if self.fail_quietely:
                print(e)
            else:
                raise e

if __name__ == "__main__":
    IP = input("Enter Dofbot's IP: ")
    PORT = input("Enter Dofbot's Port: ")
    dofbot = RealWorldDofbot(IP, int(PORT))
    pos = [np.deg2rad(0)] * 6
    dofbot.send_joint_pos(pos)
    print("Dofbot joint angles reset.")

This code is converting the predicted joint angle values from a simulation environment to the position values for the corresponding joint in a real-world Dofbot.

The send_joint_pos method first checks the number of joint positions passed to the method, and if the number of positions is not 6, it raises an exception. Then, it initializes the servo_angles array with 90 values for each joint.

For each joint in the simulation environment, the method maps the angle values from the simulation limits to the corresponding servo angle limits in the real-world Dofbot. If the angle value is out of range, the method clips it to the limit. If the joint has an inversed angle compared to the real-world joint, it calculates the value with an inverse mapping. If the resulting servo angle value is out of range, it raises an exception.

Finally, the method sends the servo angles to the real-world Dofbot using a socket connection. If the connection fails, it prints a message, and if fail_quietely is set to True, it prints the exception message, otherwise, it raises the exception.
Dylan Tussey
Can you show me where it is mapping the predicted values from the simulation environment to the corresponding servos of the real world dofbot

Yes, sure!

This part of the code is where the mapping from simulation environment to real world servo angles happens:

less

# Convert Sim angles to Real angles
servo_angles = [90] * 6
for i, pos in enumerate(joint_pos):
    if i == 5:
        # Ignore the gripper joints for Reacher task
        continue
    # Map [L, U] to [A, B]
    L, U, inversed = self.sim_dof_angle_limits[i]
    A, B = self.servo_angle_limits[i]
    angle = np.rad2deg(float(pos))
    if not L <= angle <= U:
        print("The {}-th simulation joint angle ({}) is out of range! Should be in [{}, {}]".format(i, angle, L, U))
        angle = np.clip(angle, L, U)
    servo_angles[i] = (angle - L) * ((B-A)/(U-L)) + A # Map [L, U] to [A, B]
    if inversed:
        servo_angles[i] = (B-A) - (servo_angles[i] - A) + A # Map [A, B] to [B, A]
    if not A <= servo_angles[i] <= B:
        raise Exception("(Should Not Happen) The {}-th real world joint angle ({}) is out of range! hould be in [{}, {}]".format(i, servo_angles[i], A, B))

For each joint, it maps the range of the corresponding simulation environment angle limits (L to U) to the range of the real world servo angle limits (A to B), using a linear mapping formula:

css

servo_angles[i] = (angle - L) * ((B-A)/(U-L)) + A

If the inversed flag is True for that joint, it reverses the direction of the mapping:

less

if inversed:
    servo_angles[i] = (B-A) - (servo_angles[i] - A) + A

Finally, it checks if the mapped servo angle is within the range of the real world servo angle limits. If it's not within that range, it raises an exception:

css

if not A <= servo_angles[i] <= B:
    raise Exception("(Should Not Happen) The {}-th real world joint angle ({}) is out of range! hould be in [{}, {}]".format(i, servo_angles[i], A, B))

And then it sends the mapped servo angles to the real world dofbot.
Dylan Tussey
Can you show me how I would implement the mapping similar to the code I just showed you, using this code running the simulation environment's neural network:


import numpy as np

# Create the individual arrays
jointPos = np.zeros(6)
jointVel = np.zeros(6)
goalPos = np.full(3, 0.5)
goalRot = np.zeros(4)
goalRotRel = np.zeros(4)
prevAct = np.full(6, 0)

# Concatenate the arrays into a single array
input_data = np.concatenate((jointPos, jointVel, goalPos, goalRot, goalRotRel, prevAct), dtype=np.float32)
input_dict = {input_name: input_data.reshape(1, -1)}

# Run the model on the input data
output = sess.run(None, input_dict)

# Print the output
print(output)

Sure! Here's an example of how you could implement the mapping of the predicted values to the servo positions using the code you provided:

makefile

import numpy as np

# Create the individual arrays
jointPos = np.zeros(6)
jointVel = np.zeros(6)
goalPos = np.full(3, 0.5)
goalRot = np.zeros(4)
goalRotRel = np.zeros(4)
prevAct = np.full(6, 0)

# Concatenate the arrays into a single array
input_data = np.concatenate((jointPos, jointVel, goalPos, goalRot, goalRotRel, prevAct), dtype=np.float32)
input_dict = {input_name: input_data.reshape(1, -1)}

# Run the model on the input data
output = sess.run(None, input_dict)

# Print the output
print(output)

# Map the output to servo positions
servo_positions = (output + 1.0) * 0.5 * (upper_servo_limits - lower_servo_limits) + lower_servo_limits

# Send the servo positions to the robot
dofbot.set_servo_positions(servo_positions)

In this code, the predicted output from the neural network is mapped to the servo positions using the upper_servo_limits and lower_servo_limits variables, which specify the maximum and minimum positions for each servo. The output values are first scaled to the range [0, 1] using a simple normalization formula ((output + 1.0) * 0.5) and then scaled to the appropriate range for the servos using the minimum and maximum limits. Finally, the dofbot.set_servo_positions method is used to send the servo positions to the robot.
Dylan Tussey
Can you show me what it would look like if I had this predicted value from my model for the servos:

[-1.3059846, -2.9862392, -1.9025381, -1.3023462, -1.1185279,
        -1.763873 ]

Sure! Here's an example of how you could use the predicted values to control the servos in the real-world DoFbot:

python

import time
import numpy as np
from dofbot import DoFbot

# Initialize DoFbot
dofbot = DoFbot()

# Set the predicted values
predicted_values = np.array([-1.3059846, -2.9862392, -1.9025381, -1.3023462, -1.1185279, -1.763873])

# Scale the predicted values to the range of the servos
scaled_values = np.interp(predicted_values, [-1, 1], [dofbot.servo_min, dofbot.servo_max])

# Set the servos to the scaled values
for i, value in enumerate(scaled_values):
    dofbot.set_servo_angle(i, value)

# Wait for the servos to move
time.sleep(1)

# Reset the servos to their initial positions
dofbot.reset()

In this example, the predicted values are first scaled to the range of the servos using the np.interp() function. Then, the set_servo_angle() method of the DoFbot class is used to set each servo to the corresponding scaled value. After waiting for the servos to move, the reset() method is called to return the servos to their initial positions.
Dylan Tussey
Thanks ChatGPT

You're welcome! Don't hesitate to ask if you have any more questions.
Dylan Tussey
What is this line doing:

scaled_values = np.interp(predicted_values, [-1, 1], [dofbot.servo_min, dofbot.servo_max])

This line is scaling the predicted servo values from the range of [-1, 1] to the range of [dofbot.servo_min, dofbot.servo_max], where dofbot.servo_min and dofbot.servo_max represent the minimum and maximum values that the servos of the DoFbot can accept.

The np.interp() function is used to interpolate the predicted servo values based on the input range of [-1, 1] and output range of [dofbot.servo_min, dofbot.servo_max]. This function takes three arguments: x, xp, and fp, where x is the value to be interpolated, xp is the array of x-coordinates, and fp is the array of y-coordinates.

In this case, predicted_values represents the array of x-coordinates, which is the predicted servo values from the simulation environment's neural network, [-1, 1] represents the input range, and [dofbot.servo_min, dofbot.servo_max] represents the output range or y-coordinates. The interpolated values are then stored in the scaled_values variable, which represents the scaled servo values that can be sent to the DoFbot.
Dylan Tussey
Cool.

Glad I could help! Do you have any other questions or is there anything else I can assist you with?
Dylan Tussey
Can you give me a badass project name for an autonomous robot in charge of collecting, picking, and placing ducks, and name it in Latin.

Sure! How about "Anas Praediumque Exquirere" which roughly translates to "Duck and Property Seeker" in Latin.
Dylan Tussey
Can you shorten it?

Sure! How about "AnasBot"? "Anas" is the genus name for ducks in Latin.
Dylan Tussey
Something else

How about "AnasTractus" which means "duck handler" in Latin?
Dylan Tussey
What about duck seeker?

"Duck Seeker" is a great project name for an autonomous robot in charge of collecting, picking, and placing ducks. It's simple, catchy, and easy to remember. Good luck with your project!
Dylan Tussey
Give me the name "Duck Seeker" in latin

In Latin, "Duck Seeker" could be translated to "Anas Indagator".
Dylan Tussey
What was Exquirere

"Exquirere" is a Latin verb that means "to seek out" or "to search for".
Dylan Tussey
What about AnasExquirere

"Anas Exquirere" can be translated to "Seeking Ducks" or "Searching for Ducks" in Latin.
Dylan Tussey
Can I name a forked repo in Github?

Yes, you can name a forked repository on Github. When you fork a repository on Github, a copy of the original repository is created in your Github account, and you can give the forked repository any name you like when you create it. After you have forked the repository, you can go to its settings and change its name if you wish to do so.
Dylan Tussey
Can you combine Exquirere with Latin for collect?

Sure! The Latin word for "to collect" is "colligere".

So a possible combination of "Exquirere" and "colligere" could be "Excolligere" or "Colligere Exquirere".
Dylan Tussey
Excolligere

"Excolligere" could work as a combination of "Exquirere" (to seek out) and "colligere" (to collect).
Dylan Tussey
How can I modify my a git repo cloned on my machine to push to my newly forked repo

You can modify the Git configuration to change the origin URL to your forked repository on GitHub. Here's how you can do it:

    Open a terminal window and navigate to the local repository that you want to push to your forked repo.

    Check the current remote repository URLs with the following command:

git remote -v

This should output a list of remote repositories with their respective URLs. The default name for the remote repository is usually "origin".

    Change the remote repository URL to your forked repository on GitHub with the following command:

cpp

git remote set-url origin <new-remote-url>

In the command above, replace <new-remote-url> with the URL of your forked repository on GitHub. For example:

c

git remote set-url origin https://github.com/your-username/your-repo.git

    Verify that the remote repository URL has been changed with the following command:

git remote -v

This should output a list of remote repositories with their respective URLs. Verify that the "origin" URL has been updated to your forked repository URL.

    Finally, push the changes to your forked repository with the following command:

perl

git push -u origin master

This will push your changes to your forked repository on GitHub.

Note: If you have already made changes and committed to your local repository, you may need to use the --force option with the git push command to overwrite the remote branch in your forked repository. However, be careful when using the --force option as it can overwrite other changes that may have been pushed to the remote branch.
